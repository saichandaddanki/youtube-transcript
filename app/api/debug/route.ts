import { type NextRequest, NextResponse } from "next/server"
import axios from "axios"

// This endpoint is for debugging caption availability
export async function GET(request: NextRequest) {
  try {
    const searchParams = request.nextUrl.searchParams
    const videoId = searchParams.get("videoId")

    if (!videoId) {
      return NextResponse.json({ error: "Video ID is required" }, { status: 400 })
    }

    // Step 1: Check if the video exists using YouTube API
    let videoDetails
    try {
      const videoResponse = await axios.get(
        `https://www.googleapis.com/youtube/v3/videos?id=${videoId}&key=${process.env.YOUTUBE_API_KEY}&part=snippet,contentDetails`,
        { timeout: 5000 },
      )

      if (!videoResponse.data.items || videoResponse.data.items.length === 0) {
        return NextResponse.json({ error: "Video not found" }, { status: 404 })
      }

      videoDetails = videoResponse.data.items[0].snippet
      const contentDetails = videoResponse.data.items[0].contentDetails

      // Check if captions are available according to the API
      const hasCaptionsAccordingToAPI = contentDetails.caption === "true"

      console.log(`Video ${videoId} has captions according to API: ${hasCaptionsAccordingToAPI}`)
    } catch (error) {
      return NextResponse.json(
        {
          error: "Failed to fetch video details from YouTube API",
          apiKeyWorking: false,
          details: error.message,
        },
        { status: 500 },
      )
    }

    // Step 2: Try to get the video page HTML with browser-like headers
    let pageHtml
    try {
      const videoUrl = `https://www.youtube.com/watch?v=${videoId}`
      const response = await axios.get(videoUrl, {
        headers: {
          "User-Agent":
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
          "Accept-Language": "en-US,en;q=0.9",
          Accept: "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8",
          "Sec-Fetch-Site": "same-origin",
          "Sec-Fetch-Mode": "navigate",
          "Sec-Fetch-User": "?1",
          "Sec-Fetch-Dest": "document",
          Referer: "https://www.youtube.com/",
          "Accept-Encoding": "gzip, deflate, br",
          Connection: "keep-alive",
          "Upgrade-Insecure-Requests": "1",
          "Cache-Control": "max-age=0",
        },
        timeout: 5000,
      })

      pageHtml = response.data
    } catch (error) {
      return NextResponse.json(
        {
          error: "Failed to fetch video page HTML",
          videoDetails,
          details: error.message,
        },
        { status: 500 },
      )
    }

    // Step 3: Check for caption information in the page HTML
    const playerResponseMatch = pageHtml.match(/ytInitialPlayerResponse\s*=\s*({.+?});/s)
    if (!playerResponseMatch) {
      return NextResponse.json(
        {
          error: "Could not find player response data in the page HTML",
          videoDetails,
        },
        { status: 500 },
      )
    }

    let playerResponse
    try {
      playerResponse = JSON.parse(playerResponseMatch[1])
    } catch (e) {
      return NextResponse.json(
        {
          error: "Failed to parse player response data",
          videoDetails,
          details: e.message,
        },
        { status: 500 },
      )
    }

    // Step 4: Extract caption information from multiple possible locations
    const captionTracks = playerResponse?.captions?.playerCaptionsTracklistRenderer?.captionTracks
    const captionsEnabled = playerResponse?.videoDetails?.isCaptionsAvailable

    // Check for alternative caption sources
    const hasTimedTextUrl = !!playerResponse?.streamingData?.adaptiveFormats?.some((format: any) => format.timedTextUrl)

    // Try to check if auto-generated captions are available
    let hasAutoGeneratedCaptions = false
    try {
      const autoUrl = `https://www.youtube.com/api/timedtext?v=${videoId}&asr=1&lang=en`
      const autoCaptionsResponse = await axios.get(autoUrl, { timeout: 3000 })
      hasAutoGeneratedCaptions = autoCaptionsResponse.data && autoCaptionsResponse.data.length > 10
    } catch (e) {
      console.log("Failed to check for auto-generated captions")
    }

    // Try to check if any captions are available via the transcript API
    let hasTranscriptApi = false
    try {
      const transcriptApiUrl = `https://www.youtube.com/api/timedtext?v=${videoId}&lang=en`
      const transcriptResponse = await axios.get(transcriptApiUrl, { timeout: 3000 })
      hasTranscriptApi = transcriptResponse.data && transcriptResponse.data.length > 10
    } catch (e) {
      console.log("Failed to check transcript API")
    }

    // Check if the CC button is visible in the player
    const hasCCButton =
      pageHtml.includes('"hasOnScreenCaptions":true') ||
      pageHtml.includes('"playerCaptionsTracklistRenderer"') ||
      pageHtml.includes('"captionTracks"')

    // Try the browser-like approach to see if it can find captions
    let browserMethodWorks = false
    try {
      const browserResponse = await fetch(
        `${process.env.NEXT_PUBLIC_APP_URL || ""}/api/transcript-browser?videoId=${videoId}`,
      )
      browserMethodWorks = browserResponse.ok
    } catch (e) {
      console.log("Failed to check browser method")
    }

    // Return detailed debug information
    return NextResponse.json({
      success: true,
      videoDetails,
      hasCaptions:
        captionsEnabled ||
        (captionTracks && captionTracks.length > 0) ||
        hasTimedTextUrl ||
        hasAutoGeneratedCaptions ||
        hasTranscriptApi ||
        hasCCButton ||
        browserMethodWorks,
      captionsEnabledInVideoDetails: captionsEnabled,
      captionTracksFound: captionTracks && captionTracks.length > 0,
      captionTracks: captionTracks
        ? captionTracks.map((track: any) => ({
            languageCode: track.languageCode,
            name: track.name?.simpleText,
            isAutoGenerated: track.kind === "asr",
            baseUrl: track.baseUrl ? "Available" : "Not available",
          }))
        : [],
      hasTimedTextUrl,
      hasAutoGeneratedCaptions,
      hasTranscriptApi,
      hasCCButton,
      browserMethodWorks,
      apiKeyWorking: true,
      // Include some raw data for debugging
      rawCaptionsData: {
        captionsRenderer: playerResponse?.captions ? "Present" : "Not present",
        videoDetailsHasCaptions: playerResponse?.videoDetails?.isCaptionsAvailable,
      },
    })
  } catch (error: any) {
    console.error("Error in debug endpoint:", error)

    return NextResponse.json(
      {
        error: "Failed to debug caption availability",
        details: error.message,
      },
      { status: 500 },
    )
  }
}
